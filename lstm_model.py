import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Dropout, Bidirectional
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.layers import Input

class LSTMStockPredictor:
    def __init__(self, look_back=25, dropout_rate=0.2, units=50):
        """
        Initialize the LSTM stock predictor with enhanced architecture.

        Args:
            look_back (int): Number of previous time steps to use for prediction.
            dropout_rate (float): Dropout rate for regularization.
            units (int): Number of units in LSTM layers.
        """
        self.look_back = look_back  # Using 25 time steps to predict the next value
        self.dropout_rate = dropout_rate
        self.units = units
        self.model = None

    def calculate_technical_indicators(self, data):
        """
        Calculate technical indicators commonly used in stock forecasting.

        Args:
            data (pd.DataFrame): Stock data with at least 'Close' and 'Volume' columns.

        Returns:
            data (pd.DataFrame): Dataframe with additional technical indicators.
        """
        # Simple Moving Average (SMA)
        data['SMA_20'] = data['Close'].rolling(window=20).mean()
        data['SMA_50'] = data['Close'].rolling(window=50).mean()

        # Exponential Moving Average (EMA)
        data['EMA_20'] = data['Close'].ewm(span=20, adjust=False).mean()
        data['EMA_50'] = data['Close'].ewm(span=50, adjust=False).mean()

        # Relative Strength Index (RSI)
        delta = data['Close'].diff(1)
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        data['RSI'] = 100 - (100 / (1 + rs))

        # Moving Average Convergence Divergence (MACD)
        data['MACD'] = data['Close'].ewm(span=12, adjust=False).mean() - data['Close'].ewm(span=26, adjust=False).mean()
        data['MACD_Signal'] = data['MACD'].ewm(span=9, adjust=False).mean()

        # Bollinger Bands
        data['BB_Mid'] = data['Close'].rolling(window=20).mean()
        data['BB_Upper'] = data['BB_Mid'] + 2 * data['Close'].rolling(window=20).std()
        data['BB_Lower'] = data['BB_Mid'] - 2 * data['Close'].rolling(window=20).std()

        # Momentum
        data['Momentum'] = data['Close'].diff(4)

        # Drop NaN values generated by rolling calculations
        data = data.dropna()

        return data

    def preprocess_data(self, data):
        """
        Preprocess stock data for LSTM model, including scaling.

        Args:
            data (pd.DataFrame): Stock data with at least 'Close' and 'Volume' columns.

        Returns:
            X (np.ndarray): Input features for the model.
            y (np.ndarray): Target values for the model.
            scaler (MinMaxScaler): Fitted scaler for transforming data.
        """
        data = self.calculate_technical_indicators(data)

        # Features to use for prediction
        features = ['Close', 'Volume', 'SMA_20', 'SMA_50', 'EMA_20', 'EMA_50', 'RSI', 'MACD', 'MACD_Signal', 'BB_Upper', 'BB_Lower', 'Momentum']
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_data = scaler.fit_transform(data[features])

        X, y = [], []
        for i in range(len(scaled_data) - self.look_back):
            X.append(scaled_data[i:i + self.look_back])
            y.append(scaled_data[i + self.look_back][0])  # Target is the 'Close' price

        return np.array(X), np.array(y), scaler

    def build_model(self):
        """
        Build and compile the enhanced LSTM model.
        """
        model = Sequential([
            Input(shape=(self.look_back, 12)),  # Adjust input shape for multiple features
            Bidirectional(LSTM(units=self.units, return_sequences=True)),
            Dropout(self.dropout_rate),
            LSTM(units=self.units),
            Dropout(self.dropout_rate),
            Dense(1)
        ])
        model.compile(optimizer='adam', loss='mean_squared_error')
        self.model = model

    def train(self, data):
        """
        Train the LSTM model with the provided stock data.

        Args:
            data (pd.DataFrame): Stock data with at least 'Close', 'Volume', and other technical indicators.

        Returns:
            scaler (MinMaxScaler): Fitted scaler for transforming the data.
        """
        X, y, scaler = self.preprocess_data(data)
        self.build_model()

        # Define callbacks with .keras extension
        checkpoint = ModelCheckpoint('best_model.keras', save_best_only=True, monitor='val_loss', mode='min')
        early_stopping = EarlyStopping(monitor='val_loss', patience=10, mode='min')

        self.model.fit(X, y, epochs=3, batch_size=16, validation_split=0.2, 
                    callbacks=[checkpoint, early_stopping], verbose=1)

        # Load the best model
        self.load_model('best_model.keras')

        return scaler

    def predict(self, data, scaler):
        """
        Predict the next stock price using the trained model.

        Args:
            data (pd.DataFrame): Stock data with at least 'Close', 'Volume', and other technical indicators.
            scaler (MinMaxScaler): Scaler used to preprocess the data.

        Returns:
            float: Predicted stock price.
        """
        last_sequence = data[['Close', 'Volume', 'SMA_20', 'SMA_50', 'EMA_20', 'EMA_50', 'RSI', 'MACD', 'MACD_Signal', 'BB_Upper', 'BB_Lower', 'Momentum']].values[-self.look_back:]
        last_sequence = scaler.transform(last_sequence)
        last_sequence = np.expand_dims(last_sequence, axis=0)
        prediction = self.model.predict(last_sequence)
        return scaler.inverse_transform(prediction)[0, 0]

    def save_model(self, filename):
        """
        Save the trained model to a file.

        Args:
            filename (str): Path to the file where the model should be saved.
        """
        if self.model:
            self.model.save(filename)
        else:
            raise ValueError("Model is not trained. Please train the model before saving.")

    def load_model(self, filename):
        """
        Load a previously saved model from a file.

        Args:
            filename (str): Path to the file where the model is saved.
        """
        self.model = load_model(filename)
